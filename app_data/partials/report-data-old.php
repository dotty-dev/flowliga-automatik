<?php

// Initialize players array
$players = array_fill(1, 2, [
  "name" => "",
  "one80s" => 0,
  "one71s" => 0,
  "avg" => 0,
  "highestFinish" => 0,
  "winner" => false,
  "legsWon" => 0
]);

// Initialize rest array
$rest = initializeRest();

// Initialize finishes array
$finishes = initializeFinishes();

function initializeRest()
{
  return [
    1 => array_fill(1, 5, 501) + ['sum' => 0],
    2 => array_fill(1, 5, 501) + ['sum' => 0],
    'diff' => 0
  ];
}

function initializeFinishes()
{
  return array_fill(1, 2, array_fill(1, 5, 0));
}

function get_autodarts_match_data($matchId)
{
  //function to fetch match data from play.autodarts.io API using the provided matchId and return the data, using the token generated by fetchToken() function as bearer
  global $players, $rest, $finishes;

  $token = accessToken();
  if (!$token) {
    throw new Exception("Failed to obtain access token");
  }

  $apiUrl = "https://api.autodarts.io/as/v0/matches/{$matchId}/stats";

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $apiUrl);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_HTTPHEADER, [
    "Authorization: Bearer {$token}",
    "Accept: application/json"
  ]);

  $response = curl_exec($ch);
  $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  curl_close($ch);

  if ($httpCode !== 200) {
    throw new Exception("Failed to fetch match data. HTTP Code: {$httpCode}");
  }

  $matchData = json_decode($response, true);
  if (json_last_error() !== JSON_ERROR_NONE) {
    throw new Exception("Failed to parse match data: " . json_last_error_msg());
  }



  // //save to json file
  // $filename = 'app_data/match_data_0_stats.json';
  // $jsonData = json_encode($matchData, JSON_PRETTY_PRINT);
  // if ($jsonData === false) {
  //   throw new Exception("Failed to encode match data to JSON: " . json_last_error_msg());
  // }
  // if (file_put_contents($filename, $jsonData) === false) {
  //   throw new Exception("Failed to write match data to file: $filename");
  // }


  $playerIds = [$matchData["matchStats"][0]["playerId"], $matchData["matchStats"][1]["playerId"]];

  // associative array of players with statistical entries, 
  // don't start associtative array keys with numbers, it causes trouble 180s -> one80s
  $players = [
    1 => [
      "name" => $matchData["players"][0]["name"],
      "one80s" => $matchData["matchStats"][0]["total180"],
      "one71s" => $matchData["matchStats"][0]["plus170"],
      "avg" => number_format($matchData["matchStats"][0]["average"], 2, '.', ''),
      "legsWon" => $matchData["matchStats"][0]["legsWon"],
    ],
    2 => [
      "name" => $matchData["players"][1]["name"],
      "one80s" => $matchData["matchStats"][1]["total180"],
      "one71s" => $matchData["matchStats"][1]["plus170"],
      "avg" => number_format($matchData["matchStats"][1]["average"], 2, '.', ''),
      "legsWon" => $matchData["matchStats"][1]["legsWon"],
    ]
  ];

  // iterate through legStats and update players and rest points, if playerId is index 0 of $playerIds update player 1, else player 2, per played round substract score from rest score and set finish to checkoutPoints
  foreach ($matchData["legStats"] as $legIndex => $legStat) {
    $legNumber = $legIndex + 1;
    if ($legNumber > 5) break; // We only need data for the first 5 legs

    foreach ($legStat["stats"] as $playerStat) {
      $playerIndex = array_search($playerStat["playerId"], $playerIds);
      $playerNumber = $playerIndex + 1;

      $rest[$playerNumber][$legNumber] -= $playerStat["score"];

      $finishes[$playerNumber][$legNumber] = $playerStat["checkoutPoints"];
      if ($players[$playerNumber]['highestFinish'] < $playerStat["checkoutPoints"]) {
        $players[$playerNumber]['highestFinish'] = $playerStat["checkoutPoints"];
      }
    }
  }

  if ($players[1]['avg'] == 0 && $players[2]['avg'] == 0) {
    list($players, $rest, $finishes) = processAutodartsMatchData($matchData, $players, $rest, $finishes);
  }

  // Calculate rest sum for both players
  for ($i = 1; $i <= 2; $i++) {
    for ($leg = 1; $leg <= 5; $leg++) {
      $rest[$i]['sum'] += $rest[$i][$leg];
    }
  }

  // Determine the winner based on lower rest sum
  if ($rest[1]['sum'] > $rest[2]['sum']) {
    $rest['diff'] = $rest[1]['sum'] - $rest[2]['sum'];
    $players[2]['winner'] = true;
  } else if ($rest[2]['sum'] > $rest[1]['sum']) {
    $rest['diff'] = $rest[2]['sum'] - $rest[1]['sum'];
    $players[1]['winner'] = true;
  }

  // Lookup autodarts names in $players_array
  for ($i = 1; $i <= 2; $i++) {
    global $players_autodarts_array;
    $player_keys[$i] = array_search(
      strtolower($players[$i]['name']),
      array_map('strtolower', array_column($players_autodarts_array, 1))
    );
    if ($player_keys[$i] !== false) {
      $players[$i]['name'] = $players_autodarts_array[$player_keys[$i]][0];
      $players_discord_ids[$i] = $players_autodarts_array[$player_keys[$i]][2];
    }
  }

  // Check if either both or one of the players couldn't be looked up and throw error
  if ($player_keys[1] === false && $player_keys[2] === false) {
    return includeWithVariables('app_data/partials/report-error.php', array(
      'player1_name' => $players[1]['name'],
      'player2_name' => $players[2]['name'],
      'error_reason' => 'playersNotFoundBoth',
      'game_id' => $matchId,
    ));
  }
  if ($player_keys[1] === false) {
    return includeWithVariables('app_data/partials/report-error.php', array(
      'player_name' => $players[1]['name'],
      'error_reason' => 'playerNotFound',
      'game_id' => $matchId,
    ));
  }

  if ($player_keys[2] === false) {
    return includeWithVariables('app_data/partials/report-error.php', array(
      'player_name' => $players[2]['name'],
      'error_reason' => 'playerNotFound',
      'game_id' => $matchId,
    ));
  }

  $dateTime = new DateTime($matchData['createdAt']);
  $date = $dateTime->format('d.m.Y');


  return [
    'date' => $date,
    'players' => $players,
    'rest' => $rest,
    'finishes' => $finishes,
    'discord_ids' => $players_discord_ids
  ];
}

// calculate broken autodarts match data
function processAutodartsMatchData($matchData)
{
  global $players, $rest, $finishes;
  $results = [
    'games' => [],
    'players' => []
  ];

  foreach ($matchData['players'] as $player) {
    $results['players'][$player['id']] = [
      'name' => $player['name'],
      'totalDarts' => 0,
      'totalPoints' => 0,
      'gamesPlayed' => 0,
      'one80s' => 0,
      'one71s' => 0,
      'highestFinish' => 0,
      'legsWon' => 0,
    ];
  }

  foreach ($matchData['games'] as $gameIndex => $game) {
    $gameResult = [
      'id' => $game['id'],
      'players' => []
    ];

    $playerScores = [];
    foreach ($matchData['players'] as $player) {
      $playerScores[$player['id']] = [
        'initialScore' => 501,
        'darts' => 0,
        'points' => 0,
        'checkout' => 0,
        'scores180' => 0,
        'scoresOver170' => 0,
      ];
    }

    foreach ($game['turns'] as $turn) {
      $playerId = $turn['playerId'];
      $playerScores[$playerId]['darts'] += count($turn['throws']);
      $playerScores[$playerId]['points'] += $turn['points'];
      $playerScores[$playerId]['initialScore'] -= $turn['points'];

      if ($turn['points'] == 180) {
        $playerScores[$playerId]['scores180']++;
      } elseif ($turn['points'] > 170) {
        $playerScores[$playerId]['scoresOver170']++;
      }

      if ($playerScores[$playerId]['initialScore'] == 0) {
        $playerScores[$playerId]['checkout'] = $turn['points'];
      }
    }

    foreach ($playerScores as $playerId => $score) {
      $avg = $score['darts'] > 0 ? $score['points'] / ($score['darts'] / 3) : 0;

      $gameResult['players'][$playerId] = [
        'restPoints' => $score['initialScore'],
        'checkoutPoints' => $score['checkout'],
        'average' => round($avg, 2),
        'darts' => $score['darts'],
        'scores180' => $score['scores180'],
        'scoresOver170' => $score['scoresOver170'],
      ];

      $results['players'][$playerId]['totalDarts'] += $score['darts'];
      $results['players'][$playerId]['totalPoints'] += $score['points'];
      $results['players'][$playerId]['gamesPlayed']++;
      $results['players'][$playerId]['one80s'] += $score['scores180'];
      $results['players'][$playerId]['one71s'] += $score['scoresOver170'];

      if ($score['checkout'] > $results['players'][$playerId]['highestFinish']) {
        $results['players'][$playerId]['highestFinish'] = $score['checkout'];
      }

      if ($score['initialScore'] == 0) {
        $results['players'][$playerId]['legsWon']++;
      }
    }

    $results['games'][] = $gameResult;
  }

  foreach ($results['players'] as &$player) {
    $player['avg'] = $player['totalDarts'] > 0
      ? round($player['totalPoints'] / ($player['totalDarts'] / 3), 2)
      : 0;
  }

  $playerIds = array_keys($results['players']);

  $i = 1;
  foreach ($results['players'] as $playerIndex => $playerData) {
    $players[$i]['avg'] = number_format($playerData['avg'], 2, '.', '');
    $players[$i]['one80s'] = $playerData['one80s'];
    $players[$i]['one71s'] = $playerData['one71s'];
    $players[$i]['legsWon'] = $playerData['legsWon'];
    $players[$i]['highestFinish'] = $playerData['highestFinish'];
    $i++;
  }

  $legNumber = 1;
  foreach ($results['games'] as $gameIndex => $game) {
    if ($legNumber > 5) break;

    foreach ([1, 2] as $playerIndex) {
      $rest[$playerIndex][$legNumber] = $game['players'][$playerIds[$playerIndex - 1]]['restPoints'];
      $finishes[$playerIndex][$legNumber] = $game['players'][$playerIds[$playerIndex - 1]]['checkoutPoints'];
    }

    $legNumber++;
  }
}

// extract game data from lidarts api and store into easier managable parts, return array of said parts
function get_game_data($game_id, $last_leg_winner, $loser_rest, $winner_finish)
{
  global $players, $rest, $finishes;

  try {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/)");
    curl_setopt($ch, CURLOPT_URL, "https://lidarts.org/api/game/$game_id");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_FAILONERROR, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // Only if necessary for SSL issues

    $json = curl_exec($ch);

    if ($json === false) {
      throw new Exception(curl_error($ch));
    }

    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    if ($httpCode !== 200) {
      throw new Exception("HTTP request failed. Status code: " . $httpCode);
    }

    curl_close($ch);

    // turn api json to array, "match_json" entry is json saved as string
    $game_data = json_decode($json, true);
    if (json_last_error() !== JSON_ERROR_NONE) {
      throw new Exception("Failed to decode JSON: " . json_last_error_msg());
    }

    // turn api entry "match_json" from string to associative array
    $game_data["match_json"] = json_decode($game_data["match_json"], true);

    if (json_last_error() !== JSON_ERROR_NONE) {
      throw new Exception("Failed to decode match_json: " . json_last_error_msg());
    }
  } catch (Exception $e) {
    error_log("Error fetching game data: " . $e->getMessage());
    includeWithVariables('app_data/partials/report-error.php', array(
      'error_reason' => 'gameNotFound',
      'game_id' => $game_id
    ));

    return 'error';
  }

  if ($game_data["bo_legs"] != 9 || $game_data["bo_sets"] != 1) {
    includeWithVariables('app_data/partials/report-error.php', array(
      'error_reason' => 'wrongMode'
    ));
    return 'error';
  }

  $date = $game_data["begin"];

  // associative array of players with statistical entries, 
  // don't start associtative array keys with numbers, it causes trouble 180s -> one80s
  $players = [
    1 => [
      "name" => $game_data["p1_name"],
      "one80s" => array_key_exists("p1_180", $game_data) ? $game_data["p1_180"] : 0,
      "one71s" => array_key_exists("p1_171", $game_data) ? $game_data["p1_171"] : 0,
      "avg" => number_format($game_data["p1_match_avg"], 2, '.', ''),
      "legsWon" => 0
    ],
    2 => [
      "name" => $game_data["p2_name"],
      "one80s" => array_key_exists("p2_180", $game_data) ? $game_data["p2_180"] : 0,
      "one71s" => array_key_exists("p2_171", $game_data) ? $game_data["p2_171"] : 0,
      "avg" => number_format($game_data["p2_match_avg"], 2, '.', ''),
      "legsWon" => 0
    ]
  ];

  // calc rest and get finishes,
  // api structure: each leg has 2 entrys for players with subentries for thrown scores
  if (array_key_exists('correction', $_POST)) {
    $correctionFinishes = $_POST["finishes"];
    $correctionRest = $_POST["rest"];
  }
  $legNumber = 0;

  if (count($game_data["match_json"][1]) < 5) {
    return includeWithVariables('app_data/partials/report-error.php', array(
      'error_reason' => 'gameNotFinished',
    ));
  }
  foreach ($game_data["match_json"][1] as $leg) {
    $legNumber++;
    if ($legNumber < 6) {
      $playerIterator = 0;
      // check if both players have a set to_finish key
      $toFinishError = false;
      if (isset($leg['1']['to_finish']) && isset($leg['2']['to_finish'])) {
        $toFinishError = true;
      }
      $toFinishErrorString = $toFinishError ? 'true' : 'false';
      foreach ($leg as $player) {
        $playerIterator++;
        foreach ($player["scores"] as $key => $score) {
          // check if lidarts messed up the last score on finished legs and fix based on rest score of previous throw
          if ($key === array_key_last($player["scores"]) && isset($player["to_finish"]) && ($rest[$playerIterator][$legNumber] - $score) > 0 && $toFinishError == false) {
            $finishes[$playerIterator][$legNumber] = $rest[$playerIterator][$legNumber];
            $players[$playerIterator]["legsWon"] += 1;
            $rest[$playerIterator][$legNumber] = 0;
            // else substract all thrown scores to get rest points
          } else {
            $rest[$playerIterator][$legNumber] -= $score;
            if ($rest[$playerIterator][$legNumber] < 0) {
              $rest[$playerIterator][$legNumber] = 0;
            }
            if ($rest[$playerIterator][$legNumber] == 0) {
              $finishes[$playerIterator][$legNumber] = $score;
              $players[$playerIterator]["legsWon"] += 1;
              if ($players[$playerIterator]['highestFinish'] < $score) {
                $players[$playerIterator]['highestFinish'] = $score;
              }
            }
          }
        }

        if ($legNumber == 5 && $last_leg_winner != false) {
          // if the last leg was not correctly checked, accept correction
          if ($last_leg_winner == $playerIterator) {
            $finishes[$playerIterator][$legNumber] = $winner_finish;
            $players[$playerIterator]["legsWon"] += 1;
            $rest[$playerIterator][$legNumber] = 0;
            if ($players[$playerIterator]['highestFinish'] < $winner_finish) {
              $players[$playerIterator]['highestFinish'] = $winner_finish;
            }
          } else {
            $finishes[$playerIterator][$legNumber] = 0;
            $rest[$playerIterator][$legNumber] = $loser_rest;
          }
        }
      }
    }
  }

  // calc rest sum 
  for ($i = 1; $i < 3; $i++) {
    for ($leg = 1; $leg < 6; $leg++) {
      $rest[$i]['sum'] += $rest[$i][$leg];
    }
  }

  // determine winner based on lower rest sum, if neither don't set $players[n]['winner']
  if ($rest[1]['sum'] > $rest[2]['sum']) {
    $rest['diff'] = $rest[1]['sum'] - $rest[2]['sum'];
    $players[2]['winner'] = true;
  } else if ($rest[2]['sum'] > $rest[1]['sum']) {
    $rest['diff'] = $rest[2]['sum'] - $rest[1]['sum'];
    $players[1]['winner'] = true;
  }


  // lookup lidarts names in $players_array
  for ($i = 1; $i < 3; $i++) {
    global $players_array;
    $player_keys[$i] = array_search(
      strtolower($players[$i]['name']),
      array_map('strtolower', array_column($players_array, 1))
    );
    if ($player_keys[$i] !== false) {
      $players[$i]['name'] = $players_array[$player_keys[$i]][0];
      $players_discord_ids[$i] = $players_array[$player_keys[$i]][2];
    }
  }

  // check if either both or one of the players couldn't be looked up and throw error
  if ($player_keys[1] === false && $player_keys[2] === false) {
    return includeWithVariables('app_data/partials/report-error.php', array(
      'player1_name' => $players[1]['name'],
      'player2_name' => $players[2]['name'],
      'error_reason' => 'playersNotFoundBoth',
      'game_id' => $game_id,
    ));
  }
  if ($player_keys[1] === false) {
    return includeWithVariables('app_data/partials/report-error.php', array(
      'player_name' => $players[1]['name'],
      'error_reason' => 'playerNotFound',
      'game_id' => $game_id,
    ));
  }
  if ($player_keys[2] === false) {
    return includeWithVariables('app_data/partials/report-error.php', array(
      'player_name' => $players[2]['name'],
      'error_reason' => 'playerNotFound',
      'game_id' => $game_id,
    ));
  }

  return [
    'date' => $date,
    'players' => $players,
    'rest' => $rest,
    'finishes' => $finishes,
    'discord_ids' => $players_discord_ids
  ];
}
